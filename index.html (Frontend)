<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple E-commerce Frontend</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        .section-header {
            font-size: 1.75rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        .card {
            background-color: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .input-field {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            font-size: 1rem;
        }
        .btn-primary {
            background-color: #4f46e5;
            color: #fff;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        .btn-primary:hover {
            background-color: #4338ca;
        }
        .btn-secondary {
            background-color: #6b7280;
            color: #fff;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        .btn-secondary:hover {
            background-color: #4b5563;
        }
        .btn-danger {
            background-color: #ef4444;
            color: #fff;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        .btn-danger:hover {
            background-color: #dc2626;
        }
        .btn-success {
            background-color: #22c55e;
            color: #fff;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        .btn-success:hover {
            background-color: #16a34a;
        }
        .table-auto {
            width: 100%;
            border-collapse: collapse;
        }
        .table-auto th, .table-auto td {
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
            text-align: left;
        }
        .table-auto th {
            background-color: #e0e7ff;
            font-weight: 600;
            color: #374151;
        }
        .message-box {
            position: fixed;
            top: 1rem;
            right: 1rem;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: fadeinout 4s forwards;
        }
        .message-box.success {
            background-color: #d1fae5;
            color: #065f46;
        }
        .message-box.error {
            background-color: #fee2e2;
            color: #991b1b;
        }
        @keyframes fadeinout {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
    <header class="bg-indigo-700 text-white p-4 shadow-lg">
        <div class="container flex justify-between items-center">
            <h1 class="text-3xl font-bold">My E-Shop API Frontend</h1>
            <nav>
                <span id="user-info" class="mr-4 font-medium"></span>
                <button id="logout-btn" class="btn-secondary hidden">Logout</button>
            </nav>
        </div>
    </header>

    <main class="flex-grow container py-8">
        <div id="auth-section" class="card max-w-md mx-auto">
            <h2 class="section-header">Login / Register</h2>
            <form id="login-form" class="mb-6">
                <h3 class="text-xl font-semibold mb-4 text-center">Login</h3>
                <input type="text" id="login-username" placeholder="Username" class="input-field" required>
                <input type="password" id="login-password" placeholder="Password" class="input-field" required>
                <button type="submit" class="btn-primary w-full">Login</button>
            </form>
            <hr class="my-6">
            <form id="register-form">
                <h3 class="text-xl font-semibold mb-4 text-center">Register</h3>
                <input type="text" id="register-username" placeholder="Username" class="input-field" required>
                <input type="password" id="register-password" placeholder="Password" class="input-field" required>
                <button type="submit" class="btn-primary w-full">Register (Customer)</button>
            </form>
        </div>

        <div id="customer-section" class="hidden">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2">
                    <div class="card">
                        <h2 class="section-header">Products</h2>
                        <div id="product-list" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Products will be loaded here -->
                            <p class="text-center text-gray-500 col-span-full" id="no-products-message">Loading products...</p>
                        </div>
                    </div>

                    <div class="card mt-8">
                        <h2 class="section-header">My Orders</h2>
                        <div id="my-orders-list">
                            <p class="text-center text-gray-500" id="no-orders-message">No orders placed yet.</p>
                            <!-- My orders will be loaded here -->
                        </div>
                    </div>
                </div>

                <div class="lg:col-span-1">
                    <div class="card sticky top-4">
                        <h2 class="section-header">Your Cart</h2>
                        <div id="cart-items">
                            <p class="text-center text-gray-500" id="empty-cart-message">Your cart is empty.</p>
                            <!-- Cart items will be loaded here -->
                        </div>
                        <div id="cart-summary" class="mt-4 pt-4 border-t border-gray-200 hidden">
                            <div class="flex justify-between items-center mb-4">
                                <span class="text-lg font-semibold">Total:</span>
                                <span class="text-xl font-bold text-indigo-600" id="cart-total">$0.00</span>
                            </div>
                            <button id="checkout-btn" class="btn-success w-full">Proceed to Checkout</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="admin-section" class="hidden">
            <div class="card">
                <h2 class="section-header">Admin: Product Management</h2>
                <form id="add-product-form" class="mb-8">
                    <h3 class="text-xl font-semibold mb-4">Add New Product</h3>
                    <input type="text" id="product-name" placeholder="Product Name" class="input-field" required>
                    <textarea id="product-description" placeholder="Description" class="input-field"></textarea>
                    <input type="number" id="product-price" placeholder="Price" step="0.01" class="input-field" required>
                    <input type="number" id="product-stock" placeholder="Stock" step="1" class="input-field" required>
                    <button type="submit" class="btn-primary">Add Product</button>
                </form>

                <h3 class="text-xl font-semibold mb-4">Existing Products</h3>
                <div id="admin-product-list">
                    <p class="text-center text-gray-500" id="no-admin-products-message">No products found.</p>
                    <!-- Admin products will be loaded here -->
                </div>
            </div>

            <div class="card mt-8">
                <h2 class="section-header">Admin: Order Management</h2>
                <div id="admin-orders-list">
                    <p class="text-center text-gray-500" id="no-admin-orders-message">No orders found.</p>
                    <!-- Admin orders will be loaded here -->
                </div>
            </div>
        </div>
    </main>

    <div id="message-box-container"></div>

    <footer class="bg-gray-800 text-white p-4 text-center mt-auto shadow-inner">
        <div class="container">
            <p>&copy; 2024 Simple E-commerce. All rights reserved.</p>
        </div>
    </footer>

    <script>
        const API_BASE_URL = 'http://127.0.0.1:5000'; // Replace with your Flask API URL if different

        // DOM Elements
        const authSection = document.getElementById('auth-section');
        const customerSection = document.getElementById('customer-section');
        const adminSection = document.getElementById('admin-section');
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const logoutBtn = document.getElementById('logout-btn');
        const userInfoSpan = document.getElementById('user-info');
        const productListDiv = document.getElementById('product-list');
        const cartItemsDiv = document.getElementById('cart-items');
        const cartSummaryDiv = document.getElementById('cart-summary');
        const cartTotalSpan = document.getElementById('cart-total');
        const checkoutBtn = document.getElementById('checkout-btn');
        const myOrdersListDiv = document.getElementById('my-orders-list');
        const addProductForm = document.getElementById('add-product-form');
        const adminProductListDiv = document.getElementById('admin-product-list');
        const adminOrdersListDiv = document.getElementById('admin-orders-list');
        const messageBoxContainer = document.getElementById('message-box-container');

        let currentToken = localStorage.getItem('jwt_token');
        let currentUserRole = localStorage.getItem('user_role');
        let currentUserId = localStorage.getItem('user_id');

        // --- Utility Functions ---

        function showMessage(message, type = 'success') {
            const msgBox = document.createElement('div');
            msgBox.className = `message-box ${type}`;
            msgBox.textContent = message;
            messageBoxContainer.appendChild(msgBox);

            setTimeout(() => {
                msgBox.remove();
            }, 4000); // Message disappears after 4 seconds (1s fade-in, 3s display)
        }

        async function makeApiRequest(endpoint, method = 'GET', data = null) {
            const headers = {
                'Content-Type': 'application/json',
            };
            if (currentToken) {
                headers['Authorization'] = `Bearer ${currentToken}`;
            }

            const options = {
                method: method,
                headers: headers,
            };
            if (data) {
                options.body = JSON.stringify(data);
            }

            try {
                const response = await fetch(`${API_BASE_URL}${endpoint}`, options);
                const result = await response.json();

                if (!response.ok) {
                    // Handle specific errors like token expiry
                    if (response.status === 401 && result.message === 'Token has expired') {
                        showMessage('Session expired. Please log in again.', 'error');
                        logout();
                    } else {
                        showMessage(result.message || 'An error occurred', 'error');
                    }
                    throw new Error(result.message || 'API request failed');
                }
                return result;
            } catch (error) {
                console.error('API request error:', error);
                // showMessage(`API Error: ${error.message}`, 'error'); // Already handled by response.ok check
                throw error;
            }
        }

        function updateUI() {
            authSection.classList.add('hidden');
            customerSection.classList.add('hidden');
            adminSection.classList.add('hidden');
            logoutBtn.classList.add('hidden');
            userInfoSpan.textContent = '';

            if (currentToken && currentUserRole) {
                logoutBtn.classList.remove('hidden');
                userInfoSpan.textContent = `Logged in as ${currentUserRole} (${currentUserId.substring(0, 8)}...)`;

                if (currentUserRole === 'customer') {
                    customerSection.classList.remove('hidden');
                    fetchProducts();
                    fetchCart();
                    fetchMyOrders();
                } else if (currentUserRole === 'admin') {
                    adminSection.classList.remove('hidden');
                    fetchAdminProducts();
                    fetchAdminOrders();
                }
            } else {
                authSection.classList.remove('hidden');
            }
        }

        function logout() {
            currentToken = null;
            currentUserRole = null;
            currentUserId = null;
            localStorage.removeItem('jwt_token');
            localStorage.removeItem('user_role');
            localStorage.removeItem('user_id');
            showMessage('Logged out successfully', 'success');
            updateUI();
        }

        // --- Authentication Handlers ---

        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = e.target['login-username'].value;
            const password = e.target['login-password'].value;

            try {
                const result = await makeApiRequest('/login', 'POST', { username, password });
                currentToken = result.token;
                currentUserRole = result.role;
                currentUserId = result.user_id;
                localStorage.setItem('jwt_token', currentToken);
                localStorage.setItem('user_role', currentUserRole);
                localStorage.setItem('user_id', currentUserId);
                showMessage('Login successful!', 'success');
                updateUI();
            } catch (error) {
                // Error message already shown by makeApiRequest
            }
        });

        registerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = e.target['register-username'].value;
            const password = e.target['register-password'].value;

            try {
                const result = await makeApiRequest('/register', 'POST', { username, password });
                showMessage(result.message, 'success');
                // Optionally auto-login after registration
                // loginForm['login-username'].value = username;
                // loginForm['login-password'].value = password;
                // loginForm.requestSubmit();
            } catch (error) {
                // Error message already shown by makeApiRequest
            }
        });

        logoutBtn.addEventListener('click', logout);

        // --- Product Functions (Customer View) ---

        async function fetchProducts() {
            try {
                const products = await makeApiRequest('/products');
                productListDiv.innerHTML = ''; // Clear previous products
                if (products.length === 0) {
                    productListDiv.innerHTML = '<p class="text-center text-gray-500 col-span-full">No products available. Admins can add products.</p>';
                    return;
                }
                products.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.className = 'card flex flex-col justify-between items-center text-center';
                    productCard.innerHTML = `
                        <h3 class="text-lg font-semibold mb-2">${product.name}</h3>
                        <p class="text-gray-600 text-sm mb-2">${product.description}</p>
                        <p class="text-xl font-bold text-indigo-600 mb-4">$${product.price.toFixed(2)}</p>
                        <p class="text-gray-500 text-sm mb-4">Stock: ${product.stock}</p>
                        <button data-product-id="${product.id}" class="btn-primary add-to-cart-btn w-full">Add to Cart</button>
                    `;
                    productListDiv.appendChild(productCard);
                });
                document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const productId = e.target.dataset.productId;
                        try {
                            await makeApiRequest('/cart/add', 'POST', { product_id: productId, quantity: 1 });
                            showMessage('Added to cart!', 'success');
                            fetchCart(); // Refresh cart display
                            fetchProducts(); // Refresh product list to show updated stock
                        } catch (error) {
                            // Error message already shown
                        }
                    });
                });
            } catch (error) {
                productListDiv.innerHTML = '<p class="text-center text-gray-500 col-span-full">Failed to load products.</p>';
            }
        }

        // --- Cart Functions (Customer View) ---

        async function fetchCart() {
            try {
                const cart = await makeApiRequest('/cart');
                cartItemsDiv.innerHTML = '';
                let total = 0;

                if (cart.length === 0) {
                    document.getElementById('empty-cart-message').classList.remove('hidden');
                    cartSummaryDiv.classList.add('hidden');
                    return;
                }
                document.getElementById('empty-cart-message').classList.add('hidden');
                cartSummaryDiv.classList.remove('hidden');

                cart.forEach(item => {
                    total += item.price * item.quantity;
                    const cartItemDiv = document.createElement('div');
                    cartItemDiv.className = 'flex items-center justify-between border-b border-gray-200 py-3 last:border-b-0';
                    cartItemDiv.innerHTML = `
                        <div>
                            <h4 class="font-semibold">${item.name}</h4>
                            <p class="text-gray-600 text-sm">$${item.price.toFixed(2)}</p>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button data-product-id="${item.product_id}" data-quantity="${item.quantity - 1}" class="btn-secondary update-cart-quantity-btn px-2 py-1 text-sm rounded-md">-</button>
                            <span>${item.quantity}</span>
                            <button data-product-id="${item.product_id}" data-quantity="${item.quantity + 1}" class="btn-secondary update-cart-quantity-btn px-2 py-1 text-sm rounded-md">+</button>
                            <button data-product-id="${item.product_id}" class="btn-danger remove-from-cart-btn px-2 py-1 text-sm rounded-md">Remove</button>
                        </div>
                    `;
                    cartItemsDiv.appendChild(cartItemDiv);
                });

                cartTotalSpan.textContent = `$${total.toFixed(2)}`;

                document.querySelectorAll('.update-cart-quantity-btn').forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const productId = e.target.dataset.productId;
                        const newQuantity = parseInt(e.target.dataset.quantity);
                        try {
                            await makeApiRequest('/cart/update', 'PUT', { product_id: productId, quantity: newQuantity });
                            showMessage('Cart updated!', 'success');
                            fetchCart();
                            fetchProducts(); // Refresh product list to show updated stock
                        } catch (error) {
                            // Error message already shown
                        }
                    });
                });

                document.querySelectorAll('.remove-from-cart-btn').forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const productId = e.target.dataset.productId;
                        try {
                            await makeApiRequest(`/cart/remove/${productId}`, 'DELETE');
                            showMessage('Item removed from cart!', 'success');
                            fetchCart();
                            fetchProducts(); // Refresh product list to show updated stock
                        } catch (error) {
                            // Error message already shown
                        }
                    });
                });

            } catch (error) {
                cartItemsDiv.innerHTML = '<p class="text-center text-gray-500">Failed to load cart.</p>';
                document.getElementById('empty-cart-message').classList.remove('hidden');
                cartSummaryDiv.classList.add('hidden');
            }
        }

        checkoutBtn.addEventListener('click', async () => {
            try {
                const result = await makeApiRequest('/orders', 'POST');
                showMessage(result.message, 'success');
                fetchCart(); // Cart will be empty after checkout
                fetchMyOrders(); // New order will appear
                fetchProducts(); // Stock will be updated
            } catch (error) {
                // Error message already shown
            }
        });

        // --- Order Functions (Customer View) ---

        async function fetchMyOrders() {
            try {
                const orders = await makeApiRequest('/orders/my');
                myOrdersListDiv.innerHTML = '';
                if (orders.length === 0) {
                    document.getElementById('no-orders-message').classList.remove('hidden');
                    return;
                }
                document.getElementById('no-orders-message').classList.add('hidden');

                const table = document.createElement('table');
                table.className = 'table-auto w-full';
                table.innerHTML = `
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Items</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                `;
                const tbody = table.querySelector('tbody');

                orders.forEach(order => {
                    const row = tbody.insertRow();
                    row.innerHTML = `
                        <td>${order.id.substring(0, 8)}...</td>
                        <td>${order.items.map(item => `${item.name} (x${item.quantity})`).join(', ')}</td>
                        <td>$${order.total.toFixed(2)}</td>
                        <td><span class="px-2 py-1 rounded-full text-xs font-semibold ${
                            order.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                            order.status === 'Processing' ? 'bg-blue-100 text-blue-800' :
                            order.status === 'Shipped' ? 'bg-purple-100 text-purple-800' :
                            order.status === 'Delivered' ? 'bg-green-100 text-green-800' :
                            'bg-red-100 text-red-800'
                        }">${order.status}</span></td>
                        <td>${new Date(order.created_at).toLocaleString()}</td>
                    `;
                });
                myOrdersListDiv.appendChild(table);
            } catch (error) {
                myOrdersListDiv.innerHTML = '<p class="text-center text-gray-500">Failed to load your orders.</p>';
                document.getElementById('no-orders-message').classList.remove('hidden');
            }
        }

        // --- Admin Product Management Functions ---

        addProductForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = e.target['product-name'].value;
            const description = e.target['product-description'].value;
            const price = parseFloat(e.target['product-price'].value);
            const stock = parseInt(e.target['product-stock'].value);

            try {
                const result = await makeApiRequest('/products', 'POST', { name, description, price, stock });
                showMessage(result.message, 'success');
                addProductForm.reset();
                fetchAdminProducts(); // Refresh admin product list
                fetchProducts(); // Refresh customer product list
            } catch (error) {
                // Error message already shown
            }
        });

        async function fetchAdminProducts() {
            try {
                const products = await makeApiRequest('/products');
                adminProductListDiv.innerHTML = '';
                if (products.length === 0) {
                    document.getElementById('no-admin-products-message').classList.remove('hidden');
                    return;
                }
                document.getElementById('no-admin-products-message').classList.add('hidden');

                const table = document.createElement('table');
                table.className = 'table-auto w-full';
                table.innerHTML = `
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                `;
                const tbody = table.querySelector('tbody');

                products.forEach(product => {
                    const row = tbody.insertRow();
                    row.innerHTML = `
                        <td>${product.id.substring(0, 8)}...</td>
                        <td>${product.name}</td>
                        <td>${product.description}</td>
                        <td>$${product.price.toFixed(2)}</td>
                        <td>${product.stock}</td>
                        <td>
                            <button data-product-id="${product.id}" class="btn-secondary edit-product-btn text-sm mr-2">Edit</button>
                            <button data-product-id="${product.id}" class="btn-danger delete-product-btn text-sm">Delete</button>
                        </td>
                    `;
                });
                adminProductListDiv.appendChild(table);

                document.querySelectorAll('.edit-product-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const productId = e.target.dataset.productId;
                        const productToEdit = products.find(p => p.id === productId);
                        if (productToEdit) {
                            // Populate form for editing
                            document.getElementById('product-name').value = productToEdit.name;
                            document.getElementById('product-description').value = productToEdit.description;
                            document.getElementById('product-price').value = productToEdit.price;
                            document.getElementById('product-stock').value = productToEdit.stock;

                            // Change form behavior to update
                            addProductForm.removeEventListener('submit', handleAddProductSubmit);
                            addProductForm.addEventListener('submit', async function handleUpdateProductSubmit(event) {
                                event.preventDefault();
                                const updatedName = event.target['product-name'].value;
                                const updatedDescription = event.target['product-description'].value;
                                const updatedPrice = parseFloat(event.target['product-price'].value);
                                const updatedStock = parseInt(event.target['product-stock'].value);

                                try {
                                    const result = await makeApiRequest(`/products/${productId}`, 'PUT', {
                                        name: updatedName,
                                        description: updatedDescription,
                                        price: updatedPrice,
                                        stock: updatedStock
                                    });
                                    showMessage(result.message, 'success');
                                    addProductForm.reset();
                                    fetchAdminProducts();
                                    fetchProducts();
                                    // Revert form behavior back to add
                                    addProductForm.removeEventListener('submit', handleUpdateProductSubmit);
                                    addProductForm.addEventListener('submit', handleAddProductSubmit);
                                } catch (error) {
                                    // Error message already shown
                                }
                            });
                            showMessage('Edit product form loaded', 'success');
                        }
                    });
                });

                document.querySelectorAll('.delete-product-btn').forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const productId = e.target.dataset.productId;
                        if (confirm('Are you sure you want to delete this product?')) {
                            try {
                                const result = await makeApiRequest(`/products/${productId}`, 'DELETE');
                                showMessage(result.message, 'success');
                                fetchAdminProducts();
                                fetchProducts();
                            } catch (error) {
                                // Error message already shown
                            }
                        }
                    });
                });
            } catch (error) {
                adminProductListDiv.innerHTML = '<p class="text-center text-gray-500">Failed to load products for admin.</p>';
                document.getElementById('no-admin-products-message').classList.remove('hidden');
            }
        }

        // Initial setup for add product form submission
        const handleAddProductSubmit = async (e) => {
            e.preventDefault();
            const name = e.target['product-name'].value;
            const description = e.target['product-description'].value;
            const price = parseFloat(e.target['product-price'].value);
            const stock = parseInt(e.target['product-stock'].value);

            try {
                const result = await makeApiRequest('/products', 'POST', { name, description, price, stock });
                showMessage(result.message, 'success');
                addProductForm.reset();
                fetchAdminProducts(); // Refresh admin product list
                fetchProducts(); // Refresh customer product list
            } catch (error) {
                // Error message already shown
            }
        };
        addProductForm.addEventListener('submit', handleAddProductSubmit);


        // --- Admin Order Management Functions ---

        async function fetchAdminOrders() {
            try {
                const orders = await makeApiRequest('/orders');
                adminOrdersListDiv.innerHTML = '';
                if (orders.length === 0) {
                    document.getElementById('no-admin-orders-message').classList.remove('hidden');
                    return;
                }
                document.getElementById('no-admin-orders-message').classList.add('hidden');

                const table = document.createElement('table');
                table.className = 'table-auto w-full';
                table.innerHTML = `
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>User ID</th>
                            <th>Items</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                `;
                const tbody = table.querySelector('tbody');

                orders.forEach(order => {
                    const row = tbody.insertRow();
                    row.innerHTML = `
                        <td>${order.id.substring(0, 8)}...</td>
                        <td>${order.user_id.substring(0, 8)}...</td>
                        <td>${order.items.map(item => `${item.name} (x${item.quantity})`).join(', ')}</td>
                        <td>$${order.total.toFixed(2)}</td>
                        <td>
                            <select class="status-select p-2 border rounded-md" data-order-id="${order.id}">
                                <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
                                <option value="Processing" ${order.status === 'Processing' ? 'selected' : ''}>Processing</option>
                                <option value="Shipped" ${order.status === 'Shipped' ? 'selected' : ''}>Shipped</option>
                                <option value="Delivered" ${order.status === 'Delivered' ? 'selected' : ''}>Delivered</option>
                                <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
                            </select>
                        </td>
                        <td>${new Date(order.created_at).toLocaleString()}</td>
                        <td>
                            <button data-order-id="${order.id}" class="btn-primary view-order-details-btn text-sm">Details</button>
                        </td>
                    `;
                });
                adminOrdersListDiv.appendChild(table);

                document.querySelectorAll('.status-select').forEach(select => {
                    select.addEventListener('change', async (e) => {
                        const orderId = e.target.dataset.orderId;
                        const newStatus = e.target.value;
                        try {
                            const result = await makeApiRequest(`/orders/${orderId}/status`, 'PUT', { status: newStatus });
                            showMessage(result.message, 'success');
                            fetchAdminOrders(); // Refresh to show updated status
                            fetchMyOrders(); // Refresh customer's view if they are logged in
                        } catch (error) {
                            // Error message already shown
                        }
                    });
                });

                // Implement view details button if needed
                document.querySelectorAll('.view-order-details-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const orderId = e.target.dataset.orderId;
                        const order = orders.find(o => o.id === orderId);
                        if (order) {
                            let details = `Order ID: ${order.id}\nUser ID: ${order.user_id}\nTotal: $${order.total.toFixed(2)}\nStatus: ${order.status}\nDate: ${new Date(order.created_at).toLocaleString()}\n\nItems:\n`;
                            order.items.forEach(item => {
                                details += `- ${item.name} (x${item.quantity}) @ $${item.price.toFixed(2)}\n`;
                            });
                            // Using a simple alert for now, but a custom modal would be better
                            showMessage(details, 'info'); // Using info type for message box
                        }
                    });
                });

            } catch (error) {
                adminOrdersListDiv.innerHTML = '<p class="text-center text-gray-500">Failed to load orders for admin.</p>';
                document.getElementById('no-admin-orders-message').classList.remove('hidden');
            }
        }


        // Initial UI update on page load
        document.addEventListener('DOMContentLoaded', updateUI);
    </script>
</body>
</html>
